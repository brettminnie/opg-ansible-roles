---
- name: Create elasticache subnet group
  elasticache_subnet_group:
    name: "ec-pvt-subnets-{{ vpc_name }}"
    description: "ec group for pvt subnets"
    state: present
    subnets: "{{ private_subnets }}"

- block:
    - block:
        - name: Create security group for ec
          ec2_group:
            name: "{{ ec_data.ec_sg.name }}-{{ target }}"
            description: "{{ ec_data.ec_sg.desc }}"
            rules: "{{ ec_data.ec_sg.ruleset | rules_from_dict(client_sg_ids.security_groups, ec_data.ec_sg.client_sg) }}"
            rules_egress: []
            vpc_id: "{{ vpc_id }}"
          register: ec_security_group_1
      when: ec_data.ec_sg.client_sg is defined

    - block:
        - name: Create security group for ec
          ec2_group:
            name: "{{ ec_data.ec_sg.name }}"
            description: "{{ ec_data.ec_sg.desc }}"
            rules: "{{ ec_data.ec_sg.ruleset | rules_from_dict() }}"
            rules_egress: []
            vpc_id: "{{ vpc_id }}"
          register: ec_security_group_2

      when: ec_data.ec_sg.client_sg is undefined

    - name: Add tags until 2.2
      ec2_tag:
        resource: "{{ ec_security_group_2.group_id | default(ec_security_group_1.group_id) }}"
        state: present
        tags: "{{ vpc.env_tags | combine({'Name': ec_data.ec_sg.name}) }}"

    - name: Get ec sg group ids
      set_fact:
        ec_sg_id: "{{ ec_security_group_2.group_id | default(ec_security_group_1.group_id) }}"

  when: ec_data.ec_sg is defined

- name: generate cluster identifier
  set_fact:
    ecc_instance_name: "{{ [ec_data.ec_name, opg_data.stack] | join('-') }}"
  when: "{{ [ec_data.ec_name, opg_data.stack ] | join('-') | length <= 20}}"

- name: generate cluster identifier
  set_fact:
    ecc_instance_name: "{{ [ec_data.ec_name, opg_data.stack | generate_identifier ] | join('-') }}"
  when: "{{ [ec_data.ec_name, opg_data.stack ] | join('-') | length > 20}}"

- name: Create elasticache cluster
  elasticache:
    state: present
    name: "{{ ecc_instance_name }}"
    engine: "{{ ec_data.engine|default('redis') }}"
    cache_security_groups:  []
    node_type: "{{ ec_data.node_type|default(omit) }}"
    num_nodes: "{{ ec_data.num_nodes |default(1) }}"
    cache_port: "{{ ec_data.port }}"
    cache_engine_version: "{{ ec_data.engine_version|default(omit) }}"
    security_group_ids:  "{{ ec_sg_id }}"
    wait: yes
    cache_subnet_group: "ec-pvt-subnets-{{ vpc_name }}"
    cache_parameter_group: "{{ ec_data.cache_parameter_group | default(None) }}"
  register: ec_result

- name: Generate cache cluster arn
  set_fact:
    ec_arn: "arn:aws:elasticache:{{ aws_data.region_name }}:{{ aws_data.customer_id }}:cluster:{{ ecc_instance_name }}"
  when: aws_data.customer_id is defined

- name: Generate tags for cache cluster
  command: "aws elasticache add-tags-to-resource
            --resource-name {{ ec_arn }}
            --tags Key=InstanceName,Value={{ [ec_data.ec_name, opg_data.stack] | join('-') }}
              Key=Stack,Value={{ opg_data.stack }}"
  when: ec_arn is defined

- name: Create elastic-cache route 53 entry
  route53:
    command: create
    overwrite: yes
    record: "{{ ec_data.private_dns +'.' + opg_data.stack }}.internal."
    zone: "{{ opg_data.stack }}.internal."
    hosted_zone_id: "{{ internal_dns_zone.set.zone_id }}"
    value: "{{ ec_result.elasticache.data.CacheNodes.0.Endpoint.Address | default ('') }}"
    type: CNAME
    private_zone: yes
    ttl: 300
