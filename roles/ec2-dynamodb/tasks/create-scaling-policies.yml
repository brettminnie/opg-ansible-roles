---

- name: Create iam trust relationship role
  iam_role:
    name: "scaling-role-{{ dynamodb_scaling_policy.name }}-{{ target }}"
    state: present
    assume_role_policy_document: "{{ lookup('template', 'dynamodb-scaling-trust-relationship.json.j2') }}"
  register: dynamodb_iam_role

- name: Create trust relationship policy
  iam_policy:
    iam_name: "scaling-role-{{ dynamodb_scaling_policy.name }}-{{ target }}"
    policy_name: "scaling-policy-{{ dynamodb_scaling_policy.name }}-{{ target }}"
    iam_type: role
    state: present
    policy_json: "{{ lookup('template', 'dynamodb-scaling-service-role.json.j2') }}"
  register: dynamodb_iam_policy

- name: Register our arns
  set_fact:
    policy_arn: "arn:aws:iam::{{ aws_acc_id }}:policy/scaling-policy-{{ dynamodb_scaling_policy.name }}-{{ target }}"
    role_arn: "arn:aws:iam::{{ aws_acc_id }}:instance-profile/scaling-role-{{ dynamodb_scaling_policy.name }}-{{ target }}"

- name: Register the dynamo table write capacity as a scalable target
  command: "aws application-autoscaling register-scalable-target
            --service-namespace dynamodb
            --resource-id 'table/{{ dynamodb_scaling_policy.name }}-{{ target }}'
            --scalable-dimension 'dynamodb:table:WriteCapacityUnits'
             --min-capacity {{ dynamodb_scaling_policy.write_min_units }}
            --max-capacity {{ dynamodb_scaling_policy.write_max_units }}
            --role-arn {{ role_arn }}"
  register: dynamodb_scalable_write_target

- name: Create our temporary write scaling policy file
  template:
    src: dynamodb-scaling-write-capacity.json.j2
    dest: "{{ playbook_dir }}/dynamodb-scaling-write-capacity.json"
  delegate_to: localhost

- name: Create the write scaling policy
  command: "aws application-autoscaling put-scaling-policy
            --service-namespace dynamodb
            --resource-id 'table/{{ dynamodb_scaling_policy.name }}-{{ target }}'
            --scalable-dimension 'dynamodb:table:WriteCapacityUnits'
            --policy-name '{{ dynamodb_scaling_policy.name }}-{{ target }}-write-scaling'
            --policy-type 'TargetTrackingScaling'
            --target-tracking-scaling-policy-configuration file://{{ playbook_dir }}/dynamodb-scaling-write-capacity.json"
  register: dynamodb_write_scaling_policy

- name: Create our temporary read scaling policy file
  template:
    src: dynamodb-scaling-read-capacity.json.j2
    dest: "{{ playbook_dir }}/dynamodb-scaling-read-capacity.json"
  delegate_to: localhost

- name: Register the dynamo table read capacity as a scalable target
  command: "aws application-autoscaling register-scalable-target
            --service-namespace dynamodb
            --resource-id 'table/{{ dynamodb_scaling_policy.name }}-{{ target }}'
            --scalable-dimension 'dynamodb:table:ReadCapacityUnits'
            --min-capacity {{ dynamodb_scaling_policy.read_min_units }}
            --max-capacity {{ dynamodb_scaling_policy.read_max_units }}
            --role-arn {{ role_arn }}"
  register: dynamodb_scalable_read_target

- name: Create the read scaling policy
  command: "aws application-autoscaling put-scaling-policy
            --service-namespace dynamodb
            --resource-id 'table/{{ dynamodb_scaling_policy.name }}-{{ target }}'
            --scalable-dimension 'dynamodb:table:ReadCapacityUnits'
            --policy-name '{{ dynamodb_scaling_policy.name }}-{{ target }}-read-scaling'
            --policy-type 'TargetTrackingScaling'
            --target-tracking-scaling-policy-configuration  file://{{ playbook_dir }}/dynamodb-scaling-read-capacity.json"
  register: dynamodb_write_scaling_policy

- name: Remove our policy files
  file:
    state: absent
    path: "{{ playbook_dir }}/dynamodb-scaling-*-capacity.json"
  delegate_to: localhost
