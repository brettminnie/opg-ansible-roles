---

#   asg:
#      instance_type: "{{ asg_instance_size }}"
#      min: "{{ opg_data.public_instance_count }}"
#      max: "{{ opg_data.public_instance_count * 2 }}"
#      desired: "{{ opg_data.public_instance_count }}"
#      subnets: "{{ private_subnets }}"
#      wait_for_instances: "{{ asg_wait_for_instances | default(True) }}"
#      sg: "{{ shared_security_groups + ['front-client-' + opg_data.stack, 'application-rds-' + opg_data.stack] }}"
#      asg_sg:
#        name: 'front-client-{{ opg_data.stack }}'
#        desc: 'front public access'
#        client_sg: "front-elb"
#        ruleset:
#          - proto: 'tcp'
#            ports: '443,80'
#      scaling_policies:
#        - name: scale_up
#          adjustment_type: "Percent"
#          min_adjustment_step: "{{ opg_data.public_instance_count|default(1) }}"
#          scaling_adjustment: "{{ opg_data.scaling_adjustment|default('100') }}"
#          cooldown: 180
#          metric_alarms:
#            - metric: "CPUUtilization"
#              comparison: ">="
#              threshold: 40
#              statistic: "Average"
#              period: 60
#              evaluations: 3
#              unit: Percent
#        - name: scale_down
#          adjustment_type: "Percent"
#          min_adjustment_step: "-{{ opg_data.public_instance_count|default(-) }}"
#          scaling_adjustment: "{{ opg_data.scaling_adjustment|default('50') }}"
#          cooldown: 300
#          metric_alarms:
#            - metric: "CPUUtilization"
#              comparison: "<="
#              threshold: 15
#              statistic: "Average"
#              period: 60
#              evaluations: 5
#              unit: Percent


- block:
    - name: Configure Scaling Policy
      ec2_scaling_policy:
        name: "{{ asg_name + '-' + opg_data.stack + '-' + scaling_policy_data.name }}"
        asg_name: "{{ asg_name }}-{{ opg_data.stack }}"
        state: present
        adjustment_type: "{{ scaling_policy_data.adjustment_type|default('ChangeIncapacity') }}"
        min_adjustment_step: "{{ scaling_policy_data.min_adjustment_step }}"
        scaling_adjustment: "{{ scaling_policy_data.scaling_adjustment|default(+1) }}"
        cooldown: "{{ scaling_policy_data.cooldown|default(600) }}"
      register: scaling_policy_result

    - name: Configure Metric Alarms and link to Scaling Policies
      ec2_metric_alarm:
        name: "{{ asg_name + '-' + opg_data.stack + '-' + scaling_policy_data.name + '-metric-alarm' }}"
        state: present
        metric: "{{ item.metric|default('CPUUtilization' }}"
        namespace: "AWS/EC2"
        statistic: "{{ item.statistic|default('Average') }}"
        comparison: "{{ item.comparison }}"
        threshold: "{{ item.threshold }}"
        period: "{{ item.period|default(60) }}"
        evaluation_periods: "{{ item.evaluations|default(5) }}"
        unit: "{{ item.unit|default('Percent') }}"
        dimensions:
          AutoScalingGroupName: "{{ asg_name }}-{{ opg_data.stack }}"
        alarm_actions: "{{ scaling_policy_result.results[0].arn }}"
      with_items: "{{ scaling_policy_data.metric_alarms|default([]) }}"
      register: metric_alarm_result



