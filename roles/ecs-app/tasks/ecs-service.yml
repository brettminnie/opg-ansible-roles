---
- name: Create task defintiion
  ecs_taskdefinition:
    family: "{{ appdata.name }}-{{ target}}"
    state: present
#    task_role_arn: "arn:aws:iam::{{ aws_acc_id }}:role/{{ appdata.name }}-{{ target}}"
    containers: "{{ appdata.containers }}"
    volumes: "{{ appdata.volumes|default(omit) }}"
  register: ecstask

- block:
    - set_fact:
        nfs_host: "{{ groups['nfs-' + target][0] }}"
    - set_fact:
        nfs_launch_time: "{{ hostvars[nfs_host]['create_time'][0:19]|regex_replace('T|Z', ' ') }}"

    - name: Test that NFS server is older than 6 minutes
      shell: date +'%Y-%d-%m %H:%M:%S'
      register: nfs_ready
      until: ((nfs_ready.stdout|to_datetime) - (nfs_launch_time|to_datetime('%Y-%m-%d %H:%M:%S'))).total_seconds()|int > nfs_wait|default(360)
      retries: 10
      delay: 30

#currently 1 directory is created based on the value of the 1st configured volume
    - name: Create NFS directory shares for service
      file:
        state: directory
        owner: 999
        path: "{{ appdata.volumes.0.host.sourcePath }}"
      when: appdata.volumes|count > 0
      delegate_to: "{{ groups[ 'nfs-' + target ][0] }}"
      become: true

  when: "{{ use_ecs_nfs_server|default(False) }}"


- name: Create service definition for task with ELB
  ecs_service:
    state: present
    name: "{{ appdata.name }}-{{ target}}"
    cluster: "{{ appdata.ecs_cluster }}-{{ target}}"
    load_balancers: "{{ appdata.elb.ecs_definition }}"
    role: "{{ appdata.name }}.{{ target }}"
    task_definition: "{{ appdata.name }}-{{ target}}:{{ ecstask.taskdefinition.revision }}"
    desired_count: "{{ appdata.count|default('1') }}"
  register: ecsservice
  when: has_elb

- name: Create service definition for task
  ecs_service:
    state: present
    name: "{{ appdata.name }}-{{ target}}"
    cluster: "{{ appdata.ecs_cluster }}"
    task_definition: "{{ appdata.name }}-{{ target}}:{{ ecstask.taskdefinition.revision }}"
    desired_count: "{{ appdata.count|default('1') }}"
  register: ecsservice
  when: not has_elb

- block:
    - name: Lookup client group id
      ec2_group_facts:
        filters:
          group-name: "{{ appdata.server_sg.client_sg }}-{{ target }}"
      register: client_sg_id

    - name: Create security group for app
      ec2_group:
        name: "{{ appdata.server_sg.name }}"
        description: "{{ appdata.server_sg.desc }}"
        rules: "{{ appdata.server_sg.ruleset | rules_from_dict([client_sg_id.security_groups[0].group_id]) }}"
        rules_egress: []
        vpc_id: "{{ vpc_id }}"
      register: server_security_group

    - name: Add tags until 2.2
      ec2_tag:
        resource: "{{ server_security_group.group_id }}"
        state: present
        tags: "{{ vpc.env_tags | combine({'Name': appdata.server_sg.name}) }}"

  when: appdata.server_sg is defined
