---
- name: Create task defintiion
  ecs_taskdefinition:
    family: "{{ appdata.name }}-{{ target}}"
    state: present
#    task_role_arn: "arn:aws:iam::{{ aws_acc_id }}:role/{{ appdata.name }}-{{ target}}"
    containers: "{{ appdata.containers }}"
    volumes: "{{ appdata.volumes|default(omit) }}"
  register: ecstask

- name: Get date
  set_fact:
    current_date: ansible_date_time

- name: Test that NFS server is older than 6 minutes
  action: ping
  register: nfs_ready
  delegate_to: "{{ groups[ 'nfs-' + target ][0] }}"
  until: ansible_date_time - (hostvars[item].create_time|to_datetime) >
  retries: 10
  delay: 30
  ignore_errors: true

- name: Create NFS directory shares for service
  file:
    state: directory
    owner: 999
    path: "{{ appdata.volumes.0.host.sourcePath }}"
  when: appdata.volumes|count > 0
  delegate_to: "{{ groups[ 'nfs-' + target ][0] }}"
  become: true


- name: Create service definition for task with ELB
  ecs_service:
    state: present
    name: "{{ appdata.name }}-{{ target}}"
    cluster: "{{ appdata.ecs_cluster }}-{{ target}}"
    load_balancers: "{{ appdata.elb.ecs_definition }}"
    role: "{{ appdata.name }}.{{ target }}"
    task_definition: "{{ appdata.name }}-{{ target}}:{{ ecstask.taskdefinition.revision }}"
    desired_count: "{{ appdata.count|default('1') }}"
  register: ecsservice
  when: has_elb

- name: Create service definition for task
  ecs_service:
    state: present
    name: "{{ appdata.name }}-{{ target}}"
    cluster: "{{ appdata.ecs_cluster }}"
    task_definition: "{{ appdata.name }}-{{ target}}:{{ ecstask.taskdefinition.revision }}"
    desired_count: "{{ appdata.count|default('1') }}"
  register: ecsservice
  when: not has_elb

- block:
    - name: Lookup client group id
      ec2_group_facts:
        filters:
          group-name: "{{ appdata.server_sg.client_sg }}-{{ target }}"
      register: client_sg_id

    - name: Create security group for app
      ec2_group:
        name: "{{ appdata.server_sg.name }}"
        description: "{{ appdata.server_sg.desc }}"
        rules: "{{ appdata.server_sg.ruleset | rules_from_dict([client_sg_id.security_groups[0].group_id]) }}"
        rules_egress: []
        vpc_id: "{{ vpc_id }}"
      register: server_security_group

    - name: Add tags until 2.2
      ec2_tag:
        resource: "{{ server_security_group.group_id }}"
        state: present
        tags: "{{ vpc.env_tags | combine({'Name': appdata.server_sg.name}) }}"

  when: appdata.server_sg is defined
