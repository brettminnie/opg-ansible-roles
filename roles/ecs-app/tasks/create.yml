---
- set_fact:
    ecs_clusters: "{{ app_data|rejectattr('ecs_cluster', 'undefined')|map(attribute='ecs_cluster')|list|unique }}"

#- block:
#    - name: Ensure clusters are available for the apps
#      ecs_cluster:
#        name: "{{ item }}-{{ target }}"
#        state: has_instances
#      register: cluster_data
#      with_items: "{{ ecs_clusters }}"
#
#    - set_fact:
#        inactive_clusters: "{{ cluster_data.results |rejectattr('changed')|list|count }}"
#    #
#    - name: Check that proposed clusters have instances
#      assert:
#        that: inactive_clusters|match("0")
#        msg: "One or more clusters have no instances to run the services. Aborting run"
  when: not destroy_stack|default(False)

- set_fact:
    typed_apps: "{{ app_data|rejectattr('type', 'undefined')|list }}"

- name: Create ECS apps
  include: ecs.yml
  with_items: "{{ typed_apps|selectattr('type','match','ecs')|list }}"
  loop_control:
    loop_var: appdata
  tags:
    - ecs
